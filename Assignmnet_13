Q1. Given two linked list of the same size, the task is to create a new linked list using those linked lists. 
The condition is that the greater node among both linked list will be added to the new linked list.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def mergeLinkedLists(list1, list2):
    result = ListNode()  # Dummy node to hold the result list
    tail = result  # Pointer to the tail of the result list
    ptr1, ptr2 = list1, list2  # Pointers to the heads of the input lists

    while ptr1 and ptr2:
        if ptr1.val >= ptr2.val:
            tail.next = ptr1
            ptr1 = ptr1.next
        else:
            tail.next = ptr2
            ptr2 = ptr2.next
        tail = tail.next

    # Append the remaining nodes of list1 or list2 to the result list
    if ptr1:
        tail.next = ptr1
    elif ptr2:
        tail.next = ptr2

    return result.next  # Return the head of the result list

=======================================================================================
=======================================================================================
=======================================================================================

Q2. Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should only be traversed once.

For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeDuplicates(head):
    if head is None:
        return head

    current = head

    while current and current.next:
        if current.val == current.next.val:
            current.next = current.next.next
        else:
            current = current.next

    return head
    
=======================================================================================
=======================================================================================
=======================================================================================

Q3. Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification). 

Ans. 

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

def reverse_group(current, k):
    prev = None
    next = None
    count = 0

    while current and count < k:
        next = current.next
        current.next = prev
        prev = current
        current = next
        count += 1

    if next:
        head = reverse_group(next, k)
        next.next = prev
        return head
    else:
        return prev

def reverse_k_nodes(head, k):
    if not head:
        return None

    current = head
    new_head = None
    count = 0

    while current:
        count += 1
        if count == k:
            end = current
            next_group = end.next
            end.next = None
            if not new_head:
                new_head = reverse_group(head, k)
            else:
                previous_end.next = reverse_group(head, k)
            previous_end = end
            current = next_group
            head = current
            count = 0
        else:
            current = current.next

    if count < k:
        previous_end.next = head

    return new_head

=======================================================================================
=======================================================================================
=======================================================================================

Q4. Given a linked list, 
write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. Give the complexity of your algorithm.

Ans. 
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

def reverse_group(current, k):
    prev = None
    next = None
    count = 0

    while current and count < k:
        next = current.next
        current.next = prev
        prev = current
        current = next
        count += 1

    return prev

def reverse_alternate_k_nodes(head, k):
    if not head:
        return None

    current = head
    new_head = None
    count = 0

    while current:
        count += 1
        if count % (2 * k) == k:
            end = current
            next_group = end.next
            end.next = None
            if not new_head:
                new_head = reverse_group(head, k)
            else:
                previous_end.next = reverse_group(head, k)
            previous_end = end
            current = next_group
            head = current
            count = 0
        else:
            current = current.next

    if count < k:
        previous_end.next = head

    return new_head

=======================================================================================
=======================================================================================
=======================================================================================

Q5.  Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.

Ans.

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

def delete_last_occurrence(head, key):
    if not head:
        return None

    prev = None
    current = head
    last = None
    last_prev = None

    while current:
        if current.data == key:
            last = current
            last_prev = prev
        prev = current
        current = current.next

    if last:
        if last_prev:
            last_prev.next = last.next
        else:
            head = last.next

    return head
    
=======================================================================================
=======================================================================================
=======================================================================================

Q6. Given two sorted linked lists consisting of N and M nodes respectively. 
The task is to merge both of the lists (in place) and return the head of the merged list.

Ans. 

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

def merge_sorted_lists(head1, head2):
    merged_head = Node()  # Dummy node for the merged list
    current = merged_head

    ptr1 = head1
    ptr2 = head2

    while ptr1 and ptr2:
        if ptr1.data <= ptr2.data:
            current.next = ptr1
            ptr1 = ptr1.next
        else:
            current.next = ptr2
            ptr2 = ptr2.next
        current = current.next

    if ptr1:
        current.next = ptr1
    else:
        current.next = ptr2

    return merged_head.next


=======================================================================================
=======================================================================================
=======================================================================================

Q7. Given a Doubly Linked List, the task is to reverse the given Doubly Linked List.

Ans. 

class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prev = None

def reverse_doubly_linked_list(head):
    if not head:
        return None

    current = head
    prev = None

    while current:
        next = current.next
        current.next = prev
        current.prev = next
        prev = current
        current = next

    return prev


=======================================================================================
=======================================================================================
=======================================================================================

Q8. Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.

Ans. 
class Node:
    def __init__(self, data=None):
        self.data = data
        self.prev = None
        self.next = None

def delete_node_at_position(head, position):
    if not head:
        return None

    if position == 0:
        new_head = head.next
        if new_head:
            new_head.prev = None
        return new_head

    current = head
    count = 0

    while current and count < position:
        current = current.next
        count += 1

    if not current:
        return head

    if current.next:
        current.next.prev = current.prev

    if current.prev:
        current.prev.next = current.next

    return head
