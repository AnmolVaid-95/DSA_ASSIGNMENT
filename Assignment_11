Q1. Given a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.

You **must not use** any built-in exponent function or operator.

- For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.

Ans. 

def mySqrt(x):
    if x == 0:
        return 0

    left, right = 1, x
    while left <= right:
        mid = left + (right - left) // 2
        if mid * mid > x:
            right = mid - 1
        else:
            left = mid + 1

    return right
    
=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q2. A peak element is an element that is strictly greater than its neighbors.

Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.

You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in `O(log n)` time.

Ans. 

def findPeakElement(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid

    return left
    
=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q3. Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return *the only number in the range that is missing from the array.*

Ans. 

def missingNumber(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2  # Sum of numbers in range [0, n]
    array_sum = sum(nums)  # Sum of numbers in the given array
    return total_sum - array_sum
    
=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q4. Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.

There is only **one repeated number** in `nums`, return *this repeated number*.

You must solve the problem **without** modifying the array `nums` and uses only constant extra space.

Ans. 

def findDuplicate(nums):
    # Find the intersection point of the two pointers
    tortoise = hare = nums[0]
    while True:
        tortoise = nums[tortoise]  # Move one step
        hare = nums[nums[hare]]  # Move two steps
        if tortoise == hare:
            break

    # Find the entrance of the cycle
    tortoise = nums[0]
    while tortoise != hare:
        tortoise = nums[tortoise]  # Move one step
        hare = nums[hare]  # Move one step

    return tortoise
    
=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q5. Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

Ans. 

def intersection(nums1, nums2):
    set1 = set(nums1)
    result = set()

    for num in nums2:
        if num in set1:
            result.add(num)

    return list(result)

=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q6. Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:

- `[4,5,6,7,0,1,2]` if it was rotated `4` times.
- `[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in `O(log n) time.`

Ans. 

def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        # If mid element is greater than the last element,
        # the minimum element is in the right half
        if nums[mid] > nums[right]:
            left = mid + 1
        # If mid element is less than or equal to the last element,
        # the minimum element is in the left half, including mid
        else:
            right = mid

    return nums[left]
    
=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q7. Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

You must write an algorithm with `O(log n)` runtime complexity.

Ans. 

def searchRange(nums, target):
    left = findLeftPosition(nums, target)
    right = findRightPosition(nums, target)

    return [left, right]

def findLeftPosition(nums, target):
    left = 0
    right = len(nums) - 1
    result = -1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            result = mid
            right = mid - 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return result

def findRightPosition(nums, target):
    left = 0
    right = len(nums) - 1
    result = -1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            result = mid
            left = mid + 1
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return result

=======================================================================================
=======================================================================================
=======================================================================================
    
    
Q8. Given two integer arrays nums1 and nums2, return an array of their intersection. 
Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order. 

Ans. 

from collections import Counter

def intersect(nums1, nums2):
    counter1 = Counter(nums1)
    result = []

    for num in nums2:
        if num in counter1 and counter1[num] > 0:
            result.append(num)
            counter1[num] -= 1

    return result


