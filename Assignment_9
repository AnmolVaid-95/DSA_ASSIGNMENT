Q1. 

Given an integer `n`, return *`true` if it is a power of two. Otherwise, return `false`*.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.

**Example 1:**
Input: n = 1 

Output: true

**Example 2:**
Input: n = 16 

Output: true

**Example 3:**
Input: n = 3 

Output: false

Ans.

def isPowerOfTwo(n):
    if n <= 0:
        return False
    return n & (n - 1) == 0


===============================================================
===============================================================
===============================================================

Q2.
 
Given a number n, find the sum of the first natural numbers.

**Example 1:**

Input: n = 3 

Output: 6

**Example 2:**

Input  : 5 

Output : 15

Ans.


def sumOfNaturalNumbers(n):
    return (n * (n + 1)) // 2


===============================================================
===============================================================
===============================================================

Q3.

Given a positive integer, N. Find the factorial of N. 

**Example 1:**

Input: N = 5 

Output: 120

**Example 2:**

Input: N = 4

Output: 24

Ans.

def factorial(N):
    if N == 0 or N == 1:
        return 1
    else:
        return N * factorial(N - 1)
        
===============================================================
===============================================================
===============================================================

Q4.

Given a number N and a power P, the task is to find the exponent of this number raised to the given power, i.e. N^P.

**Example 1 :** 

Input: N = 5, P = 2

Output: 25

**Example 2 :**
Input: N = 2, P = 5

Output: 32

Ans.

N = 5
P = 2
result = N ** P
print(result)  # Output: 25

N = 2
P = 5
result = N ** P
print(result)  # Output: 32

        
===============================================================
===============================================================
===============================================================

Q5.

Given an array of integers **arr**, the task is to find maximum element of that array using recursion.

**Example 1:**

Input: arr = {1, 4, 3, -5, -4, 8, 6};
Output: 8

**Example 2:**

Input: arr = {1, 4, 45, 6, 10, -8};
Output: 45

Ans.

def find_max(arr, n):
    # Base case: if the array contains only one element,
    # return that element
    if n == 1:
        return arr[0]
    
    # Recursive case: compare the first element with the
    # maximum of the rest of the elements
    return max(arr[n-1], find_max(arr, n-1))

# Example usage:
arr = [1, 4, 3, -5, -4, 8, 6]
n = len(arr)
result = find_max(arr, n)
print(result)  # Output: 8

arr = [1, 4, 45, 6, 10, -8]
n = len(arr)
result = find_max(arr, n)
print(result)  # Output: 45


===============================================================
===============================================================
===============================================================

Q6.

Given first term (a), common difference (d) and a integer N of the Arithmetic Progression series, the task is to find Nth term of the series.

**Example 1:**

Input : a = 2 d = 1 N = 5
Output : 6
The 5th term of the series is : 6

**Example 2:**

Input : a = 5 d = 2 N = 10
Output : 23
The 10th term of the series is : 23

Ans. 

def find_nth_term(a, d, N):
    nth_term = a + (N - 1) * d
    return nth_term

# Example usage:
a = 2
d = 1
N = 5
result = find_nth_term(a, d, N)
print(result)  # Output: 6

a = 5
d = 2
N = 10
result = find_nth_term(a, d, N)
print(result)  # Output: 23


===============================================================
===============================================================
===============================================================

Q7.

Given a string S, the task is to write a program to print all permutations of a given string.

**Example 1:**

***Input:***

*S = “ABC”*

***Output:***

*“ABC”, “ACB”, “BAC”, “BCA”, “CBA”, “CAB”*

**Example 2:**

***Input:***

*S = “XY”*

***Output:***

*“XY”, “YX”*

Ans.

def permute(s, left, right):
    if left == right:
        print("".join(s))
    else:
        for i in range(left, right + 1):
            s[left], s[i] = s[i], s[left]  # Swap characters
            permute(s, left + 1, right)  # Recurse on the remaining characters
            s[left], s[i] = s[i], s[left]  # Backtrack (restore original order)

def print_permutations(s):
    n = len(s)
    s = list(s)  # Convert the string to a list of characters
    permute(s, 0, n - 1)

# Example usage:
S = "ABC"
print_permutations(S)  # Output: ABC, ACB, BAC, BCA, CBA, CAB

S = "XY"
print_permutations(S)  # Output: XY, YX

===============================================================
===============================================================
===============================================================

Q8.
Given an array, find a product of all array elements.

**Example 1:**

Input  : arr[] = {1, 2, 3, 4, 5}
Output : 120
**Example 2:**

Input  : arr[] = {1, 6, 3}
Output : 18

Ans.

def product_of_array(arr):
    product = 1
    for num in arr:
        product *= num
    return product

# Example usage:
arr = [1, 2, 3, 4, 5]
print(product_of_array(arr))  # Output: 120

arr = [1, 6, 3]
print(product_of_array(arr))  # Output: 18

