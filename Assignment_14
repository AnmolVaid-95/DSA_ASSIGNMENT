Q1. Given a linked list of **N** nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def detectAndRemoveLoop(head):
    if not head or not head.next:
        return

    # Detect the loop using Floyd's Algorithm
    slow = head
    fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            break

    # If there is no loop, return
    if slow != fast:
        return

    # Move slow pointer to the start of the linked list
    slow = head

    # Find the meeting point of slow and fast pointers
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Unlink the last node to remove the loop
    fast.next = None

=========================================================================================
=========================================================================================
=========================================================================================

Q2. A number N is represented in Linked List such that each digit corresponds to a node in linked list. You need to add 1 to it.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def reverseLinkedList(head):
    prev = None
    curr = head

    while curr:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node

    return prev


def addOne(head):
    # Reverse the linked list
    head = reverseLinkedList(head)

    curr = head
    carry = 1

    while curr:
        curr.val += carry
        carry = curr.val // 10
        curr.val %= 10

        if not curr.next:
            break

        curr = curr.next

    # If there is still a carry, add a new node with carry as its value
    if carry > 0:
        curr.next = ListNode(carry)

    # Reverse the linked list again to restore the original order
    head = reverseLinkedList(head)

    return head
    
=========================================================================================
=========================================================================================
=========================================================================================

Q3. Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:(i) a next pointer to the next node,(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. Note: The flattened list will be printed using the bottom pointer instead of next pointer.

Ans. 

class Node:
    def __init__(self, data=None, next=None, bottom=None):
        self.data = data
        self.next = next
        self.bottom = bottom


def mergeLists(head1, head2):
    dummy = Node(0)
    tail = dummy

    while head1 and head2:
        if head1.data <= head2.data:
            tail.bottom = head1
            head1 = head1.bottom
        else:
            tail.bottom = head2
            head2 = head2.bottom

        tail = tail.bottom

    if head1:
        tail.bottom = head1
    else:
        tail.bottom = head2

    return dummy.bottom


def flattenLinkedList(head):
    if not head or not head.next:
        return head

    head.next = flattenLinkedList(head.next)

    head = mergeLists(head, head.next)

    return head

=========================================================================================
=========================================================================================
=========================================================================================

Q4. You are given a special linked list with **N** nodes where each node has a next pointer pointing to its next node. You are also given **M** random pointers, where you will be given **M** number of pairs denoting two nodes **a** and **b**  **i.e. a->arb = b** (arb is pointer to random node)**.**

Construct a copy of the given list. The copy should consist of exactly **N** new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes **X** and **Y** in the original list, where **X.arb** **-->** **Y**, then for the corresponding two nodes **x** and **y** in the copied list, **x.arb --> y.**

Return the head of the copied linked list.

Ans. 

class Node:
    def __init__(self, data=None, next=None, random=None):
        self.data = data
        self.next = next
        self.random = random


def copyRandomList(head):
    if not head:
        return None

    # Create new nodes and store mapping between original and copied nodes
    node_mapping = {}
    curr = head
    while curr:
        new_node = Node(curr.data)
        node_mapping[curr] = new_node
        curr = curr.next

    # Assign next and random pointers of the copied nodes
    curr = head
    while curr:
        copied_node = node_mapping[curr]
        copied_node.next = node_mapping.get(curr.next)
        copied_node.random = node_mapping.get(curr.random)
        curr = curr.next

    return node_mapping[head]

=========================================================================================
=========================================================================================
=========================================================================================

Q5. Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return *the reordered list*.

The **first** node is considered **odd**, and the **second** node is **even**, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in `O(1)` extra space complexity and `O(n)` time complexity.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def oddEvenList(head):
    if not head or not head.next:
        return head

    oddHead = odd = head
    evenHead = even = head.next

    while even and even.next:
        odd.next = even.next
        odd = odd.next
        even.next = odd.next
        even = even.next

    odd.next = evenHead

    return oddHead
    
=========================================================================================
=========================================================================================
=========================================================================================

Q6. Given a singly linked list of size N. 
The task is to left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def leftShiftLinkedList(head, k):
    if not head or not head.next or k == 0:
        return head

    # Find the length of the linked list
    length = 0
    curr = head
    while curr:
        length += 1
        curr = curr.next

    # Adjust k if necessary
    k = k % length

    if k == 0:
        return head

    # Find the new head of the left-shifted linked list
    newHead = head
    for _ in range(k):
        newHead = newHead.next

    # Find the end of the original linked list
    end = head
    while end.next:
        end = end.next

    # Set the end of the original linked list to point to the head
    end.next = head

    # Set the new end of the left-shifted linked list
    temp = newHead
    while temp.next != newHead:
        temp = temp.next
    temp.next = None

    return newHead

=========================================================================================
=========================================================================================
=========================================================================================

Q7. 

You are given the `head` of a linked list with `n` nodes.

For each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it.

Return an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.

Ans. 

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def nextLargerNodes(head):
    stack = []
    answer = []
    index = 0

    # Traverse the linked list in reverse order
    while head:
        while stack and head.val >= stack[-1][0]:
            stack.pop()

        if not stack:
            answer.insert(0, 0)
        else:
            answer.insert(0, stack[-1][0])

        stack.append((head.val, index))
        index += 1
        head = head.next

    return answer

=========================================================================================
=========================================================================================
=========================================================================================

Q8. Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

(Note that in the examples below, all sequences are serializations of `ListNode` objects.)

Ans. 
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def removeZeroSumSublists(head):
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    curr = head
    sum = 0
    sums = {}

    while curr:
        sum += curr.val

        if sum in sums:
            # Remove the nodes between prev and curr (inclusive)
            prev.next = sums[sum].next
        else:
            # Store the sum and corresponding node in a dictionary
            sums[sum] = prev

        curr = curr.next
        prev = prev.next

    return dummy.next

